Workflow:

A.  Load EVERYTHING from disk in to the "Library".  You tell me the all the roots (LibraryRoot) and 
    I'll walk through all files and load them into the "Library": duplicates, all file types, everything.

B.  Create/Update the file extension list of all known file extensions from the "Library".  You tell 
    me, which extensions need to be processed from the "Library" by setting a flag in the table.  For 
    example, I'm not going to process ".jpeg" files since they don't contain a media type I'm 
    interested in.  Remember, this is basically to help manage "music" files.

C.  I'll walk through the "Library" looking only at files with the extensions you told me
    to process (in step B) and then extract the tag info from the file.  I'll place all of 
    the detail into "LibraryFileSpec".  You might want to make sure that I didn't miss 
    any important files from the "Library"

D.	Create the "MasterLibraryFile"... this will dedup (and attempt to pick the "best" copy)
	and create the List of Files to be written to disk and given to iTunes to process.  
	The de-dup is by "artist-album-title" with special care given to files that 
	do not contain one of those attributes.  In fact, any "track" that is missing one or
	more of "artist-album-title" will not be de-duped.

E.  Copy files from the various LibraryRoot locations to the Master Library Location based 
	on the "MasterLibraryFile".  

0.  In order for the copy-to-master step to work, windows needs a little tweek:
	http://boinst.wordpress.com/2012/03/20/mount-cifs-cannot-allocate-memory-mounting-windows-share/
	Set the following paramter to "3" in regedit.
	HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters\Size
	
	In order to get iTunes to "add a folder" to the library, you may need to hit the "alt" key to bring up the menu.

1.  Recreate the tablespace and database:
	CREATE TABLESPACE bachdb
	  OWNER bach
	  LOCATION '/u02/pgsql/bachdb';

    CREATE DATABASE bachdb
      WITH OWNER = bach
           ENCODING = 'UTF8'
           TABLESPACE = bachdb
           LC_COLLATE = 'en_US.UTF-8'
           LC_CTYPE = 'en_US.UTF-8'
           CONNECTION LIMIT = -1;

2.  Execute the db migrations (from the command prompt)
    rake db:migrate
    
2a. Mount the music libraries
    This should be all the mounts required including the master and iTunes
    Master - The only single directory given to iTunes that has been populated with all music and de-duped.
    iTunes - The iTunes directory.  Need to check this in later steps to be sure nothing has been
    downloaded or added to that directory.
    export USER=nollenr
    export PASSWD=''
    http://unix.stackexchange.com/questions/2998/how-do-i-mount-a-wd-mybook-world-network-drive-in-linux
    mount.cifs //140.198.4.57/Users/nollenr/Documents/MCCC\ Drop\ Box/Dropbox/Music /media/nollenr-r7e64/music/ -o uid=501,gid=502
    mount.cifs //140.198.4.57/Users/nollenr/Documents/MCCC\ Drop\ Box/Dropbox/Temp\ Music /media/nollenr-r7e64/temp_music/ -o uid=501,gid=502
    mount.cifs //140.198.4.57/Users/nollenr/Documents/temp/music /media/nollenr-r7e64/master -o uid=501,gid=502
    mount.cifs "//140.198.4.57/Users/nollenr/Documents/MCCC Documents/Ron's Personal Documents/music" /media/nollenr-r7e64/personal_docs -o uid=501,gid=502
    mount.cifs "//140.198.4.57/Users/nollenr/Music/iTunes" /media/nollenr-r7e64/myitunes -o uid=501,gid=502

3.  Load the methods (in rails console)
    This should be the _complete_ list of modules that are required or need to be loaded.
    require 'taglib'
    load 'm_find_fqfn.rb'
    load 'm_get_file_info.rb'
    load 'm_process_dir.rb'
    load 'm_file_extension.rb'
    load 'm_process_libraries.rb'
    load 'm_extension_list.rb'
    load 'm_process_file_specs.rb'
    load 'm_create_master_library_record.rb'
    load 'm_create_or_update_master_library.rb'
    load 'm_library_to_master_check.rb'
    load 'm_create_physical_master.rb'
    load 'm_prune_tree.rb'
    load 'm_crosscheck_master.rb'
    load 'm_crosscheck_master_sub.rb'
    load 'm_crosscheck_libraries.rb'
    load 'm_crosscheck_itunes.rb'
    load 'm_crosscheck_itunes_cleanup.rb'
    load 'm_setup_logging.rb'
    load 'm_log.rb'



4.  Create the Library (1:30 for 14,948 records)
    Note that some of these use the same mount point more than once, but in a deeper directory level.
    LibraryRoot.create(name: "/media/nollenr-r7e64/music/AudioBooks", priority: 1)
    LibraryRoot.create(name: "/media/nollenr-r7e64/music/iTunes Media/Music", priority: 2)
    LibraryRoot.create(name: "/media/nollenr-r7e64/music/iTunes Music", priority: 3)
    LibraryRoot.create(name: "/media/nollenr-r7e64/music/Music", priority: 4)
    LibraryRoot.create(name: "/media/nollenr-r7e64/temp_music/iTunes - DO NOT USE/Audiobooks", priority: 5)
    LibraryRoot.create(name: "/media/nollenr-r7e64/temp_music/iTunes - DO NOT USE/iTunes Media/Music", priority: 6)
    LibraryRoot.create(name: "/media/nollenr-r7e64/temp_music/iTunes - DO NOT USE/Music - DO NOT USE", priority: 7)
    LibraryRoot.create(name: "/media/nollenr-r7e64/master", priority: 0, ismaster: true)
    LibraryRoot.create(name: "/media/nollenr-r7e64/myitunes", priority: 99, isitunes: true)
    # This should not process the master nor the itunes directories.  That will happen later.
    m_process_libraries

5.  Load the extension list (all known extensions in the library) and set the flag to true for files
    with a tag. (a few seconds)
    m_extension_list
    FileExtension.where(:extension => ['.mp3','.m4p','.m4a','.m4b']).update_all(:process_tag => true)
    FileExtension.where(extension: '.m4a').update_all(sort_order: 1, description: "DRM Free")
    FileExtension.where(extension: '.mp3').update_all(sort_order: 2)
    FileExtension.where(extension: '.m4p').update_all(sort_order: 3, description: "iTunes format includes DRM")
    FileExtension.where(extension: '.m4b').update_all(description: 'MPEG-4 Audio Book')
    
    
6.  Populate the Libary File Spec - Get the details of the files I care about from the tag (5:35 for 11,813 records)
    This will process everything in the Library that is a leaf record where that leaf record id is not in file spec.
    m_process_file_specs
    
7.  Check for Library leaf entries that have no details
    load 'm_library_leaf_records_wo_details.rb'
    
8.  Load the Master Library (MasterLibraryFile) - This is where the important logic sits. (1:30 for 4,397 records)
    m_create_or_update_master_library
    
9.  A quick check that the number of tracks (artist, album, title) in the library is the same as the number in the master
    m_library_to_master_check  

10. Create the physical master library  (20:00 for 4,397 files)
    myMaster = LibraryRoot.where(ismaster: true).first
    m_create_physical_master(myMaster.name)  

================================================================================================
The stuff above really only needs to get run once. (except for updated the extension list)
The stuff below gets run over and over and over
================================================================================================    
11. Crosscheck the master (negligable time)
    Check to be sure A: All files are still on disk and B: Any new files.
    m_crosscheck_master
    ** Check the log table for actions you may need to take.  process_name like 'crosscheck%'
    ** Reports on case mis-match issues as well.  No action needs to be take for those.

12. Crosscheck the libraries (negligable time)
    What the heck was this? -> LibraryRoot.create(name: "/media/nollenr-r7e64/personal_docs", priority: 8)
    ** Oh... this was for testing the addition of new music!
    The crosscheck does two things:
    A.reads all the leaf records from the library, finds the fqfn and checks the disk to be sure the
      file is still there
    B.looks at all root records, and runs the m_process_dir on them
      which should populate the library with any records not already there.  The process is careful
      not to create duplicate records... and will only create records when it finds a "new" entry on disk
      TODO:  make sure this isn't looking at itunes or master library entries
    ** Check the log table for actions.  process_name like 'crosscheck%'
    m_crosscheck_libraries
    
    The next step will create file specs only for new files by checking to see if the Library id is
      in the library file specs table (as idoflibraryrecord)
    TODO:  Process file specs doesn't record anything.  It really should report on updated info!
    m_process_file_specs
    
    **Check the log table for actions.  process_name like "create-or-update-master-library"
    m_create_or_update_master_library

    TODO:  m_create_physical_master doesn't log anything and it should.   
    m_create_physical_master("/media/nollenr-r7e64/master")

    Note:  WHen running a test, you might want to delete "sample music/Kalimba.mp3" (directory and file) so that 
    the crosscheck has something new to try and pick up.	  

13. Crosscheck the iTunes library
    This will  check to see if there are any  music files in the itunes library.  It populates the Library,
    LibraryFileSpec and then cleans up afterword.
    **Check the log table for actions.  process_name like "crosscheck-itunes"
    m_crosscheck_itunes
    
    m_crosscheck_itunes_cleanup
    
    testing m_prune_tree
    0.  LibraryFileSpec.where(isitunes: true).delete_all
    1.  Library.where(name: '/media/nollenr-r7e64/myitunes')
    2.  load 'm_prune_tree.rb'
    2.  m_prune_tree(15437, 15437)
    
    
Testing Statements:
MasterLibraryFile.where(artist: 'Diana Krall', album: 'Christmas Songs (iTunes Version)', title: 'White Christmas').count
MasterLibraryFile.where(artist: 'Diana Krall', album: 'ABC123', title: 'White Christmas').count
MasterLibraryFile.where(artist: 'Hillary Rodham Clinton ', album: 'Living History', title: 'Living History Part 3 of 3').count